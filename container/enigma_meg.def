# Generated by Neurodocker and Reproenv.

Bootstrap: docker
From: neurodebian:bullseye

%files
./enigma_meg.yml /
./condastartup.sh /

%environment
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export ND_ENTRYPOINT="/neurodocker/startup.sh"
export OS="Linux"
export PATH="/opt/freesurfer-7.4.1/bin:/opt/freesurfer-7.4.1/fsfast/bin:/opt/freesurfer-7.4.1/tktools:/opt/freesurfer-7.4.1/mni/bin:$PATH"
export FREESURFER_HOME="/opt/freesurfer-7.4.1"
export FREESURFER="/opt/freesurfer-7.4.1"
export SUBJECTS_DIR="/opt/freesurfer-7.4.1/subjects"
export LOCAL_DIR="/opt/freesurfer-7.4.1/local"
export FSFAST_HOME="/opt/freesurfer-7.4.1/fsfast"
export FMRI_ANALYSIS_DIR="/opt/freesurfer-7.4.1/fsfast"
export FUNCTIONALS_DIR="/opt/freesurfer-7.4.1/sessions"
export FS_OVERRIDE="0"
export FIX_VERTEX_AREA=""
export FSF_OUTPUT_FORMAT="nii.gz"
export MINC_BIN_DIR="/opt/freesurfer-7.4.1/mni/bin"
export MINC_LIB_DIR="/opt/freesurfer-7.4.1/mni/lib"
export MNI_DIR="/opt/freesurfer-7.4.1/mni"
export MNI_DATAPATH="/opt/freesurfer-7.4.1/mni/data"
export MNI_PERL5LIB="/opt/freesurfer-7.4.1/mni/share/perl5"
export PERL5LIB="/opt/freesurfer-7.4.1/mni/share/perl5"
export CONDA_DIR="/opt/miniconda-latest"
export PATH="/opt/miniconda-latest/bin:$PATH"

%post
export ND_ENTRYPOINT="/neurodocker/startup.sh"
apt-get update -qq
apt-get install -y -q --no-install-recommends \
    apt-utils \
    bzip2 \
    ca-certificates \
    curl \
    locales \
    unzip
rm -rf /var/lib/apt/lists/*
sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
dpkg-reconfigure --frontend=noninteractive locales
update-locale LANG="en_US.UTF-8"
chmod 777 /opt && chmod a+s /opt
mkdir -p /neurodocker
if [ ! -f "$ND_ENTRYPOINT" ]; then
  echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT"
  echo 'set -e' >> "$ND_ENTRYPOINT"
  echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT"
  echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT";
fi
chmod -R 777 /neurodocker && chmod a+s /neurodocker

apt-get update -qq
apt-get install -y -q --no-install-recommends \
    git
rm -rf /var/lib/apt/lists/*

apt-get update -qq
apt-get install -y -q --no-install-recommends \
    bc \
    ca-certificates \
    curl \
    libgomp1 \
    libxmu6 \
    libxt6 \
    perl \
    tcsh
rm -rf /var/lib/apt/lists/*
echo "Downloading FreeSurfer ..."
mkdir -p /opt/freesurfer-7.4.1
curl -fL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/7.4.1/freesurfer-linux-centos7_x86_64-7.4.1.tar.gz \
| tar -xz -C /opt/freesurfer-7.4.1 --owner root --group root --no-same-owner --transform='s,freesurfer/,,' \
  --exclude='average/mult-comp-cor' \
  --exclude='lib/cuda' \
  --exclude='lib/qt' \
  --exclude='subjects/V1_average' \
  --exclude='subjects/bert' \
  --exclude='subjects/cvs_avg35' \
  --exclude='subjects/cvs_avg35_inMNI152' \
  --exclude='subjects/fsaverage3' \
  --exclude='subjects/fsaverage4' \
  --exclude='subjects/fsaverage5' \
  --exclude='subjects/fsaverage6' \
  --exclude='subjects/fsaverage_sym' \
  --exclude='trctrain'

apt-get update -qq
apt-get install -y -q --no-install-recommends \
    bzip2 \
    ca-certificates \
    curl
rm -rf /var/lib/apt/lists/*
# Install dependencies.
export PATH="/opt/miniconda-latest/bin:$PATH"
echo "Downloading Miniconda installer ..."
conda_installer="/tmp/miniconda.sh"
curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
bash "$conda_installer" -b -p /opt/miniconda-latest
rm -f "$conda_installer"
conda update -yq -nbase conda
# Prefer packages in conda-forge
conda config --system --prepend channels conda-forge
# Packages in lower-priority channels not considered if a package with the same
# name exists in a higher priority channel. Can dramatically speed up installations.
# Conda recommends this as a default
# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
conda config --set channel_priority strict
conda config --system --set auto_update_conda false
conda config --system --set show_channel_urls true
# Enable `conda activate`
conda init bash
conda env create  --name enigma_meg --file enigma_meg.yml
# Clean up
sync && conda clean --all --yes && sync
rm -rf ~/.cache/pip/*

test "$(getent passwd nonroot)" \
|| useradd --no-user-group --create-home --shell /bin/bash nonroot


su - nonroot

# Save specification to JSON.
su - root
printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "./enigma_meg.yml", \
          "./condastartup.sh" \
        ], \
        "destination": "/" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "git" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    git\\nrm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "neurodebian:bullseye" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "OS": "Linux", \
        "PATH": "/opt/freesurfer-7.4.1/bin:/opt/freesurfer-7.4.1/fsfast/bin:/opt/freesurfer-7.4.1/tktools:/opt/freesurfer-7.4.1/mni/bin:$PATH", \
        "FREESURFER_HOME": "/opt/freesurfer-7.4.1", \
        "FREESURFER": "/opt/freesurfer-7.4.1", \
        "SUBJECTS_DIR": "/opt/freesurfer-7.4.1/subjects", \
        "LOCAL_DIR": "/opt/freesurfer-7.4.1/local", \
        "FSFAST_HOME": "/opt/freesurfer-7.4.1/fsfast", \
        "FMRI_ANALYSIS_DIR": "/opt/freesurfer-7.4.1/fsfast", \
        "FUNCTIONALS_DIR": "/opt/freesurfer-7.4.1/sessions", \
        "FS_OVERRIDE": "0", \
        "FIX_VERTEX_AREA": "", \
        "FSF_OUTPUT_FORMAT": "nii.gz", \
        "MINC_BIN_DIR": "/opt/freesurfer-7.4.1/mni/bin", \
        "MINC_LIB_DIR": "/opt/freesurfer-7.4.1/mni/lib", \
        "MNI_DIR": "/opt/freesurfer-7.4.1/mni", \
        "MNI_DATAPATH": "/opt/freesurfer-7.4.1/mni/data", \
        "MNI_PERL5LIB": "/opt/freesurfer-7.4.1/mni/share/perl5", \
        "PERL5LIB": "/opt/freesurfer-7.4.1/mni/share/perl5" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    libgomp1 \\\\\\n    libxmu6 \\\\\\n    libxt6 \\\\\\n    perl \\\\\\n    tcsh\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading FreeSurfer ...\\"\\nmkdir -p /opt/freesurfer-7.4.1\\ncurl -fL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/7.4.1/freesurfer-linux-centos7_x86_64-7.4.1.tar.gz \\\\\\n| tar -xz -C /opt/freesurfer-7.4.1 --owner root --group root --no-same-owner --transform='"'"'s,freesurfer/,,'"'"' \\\\\\n  --exclude='"'"'average/mult-comp-cor'"'"' \\\\\\n  --exclude='"'"'lib/cuda'"'"' \\\\\\n  --exclude='"'"'lib/qt'"'"' \\\\\\n  --exclude='"'"'subjects/V1_average'"'"' \\\\\\n  --exclude='"'"'subjects/bert'"'"' \\\\\\n  --exclude='"'"'subjects/cvs_avg35'"'"' \\\\\\n  --exclude='"'"'subjects/cvs_avg35_inMNI152'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage3'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage4'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage5'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage6'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage_sym'"'"' \\\\\\n  --exclude='"'"'trctrain'"'"'" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda-latest", \
        "PATH": "/opt/miniconda-latest/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda-latest/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda-latest\\nrm -f \\"$conda_installer\\"\\nconda update -yq -nbase conda\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda env create  --name enigma_meg --file enigma_meg.yml\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/condastartup.sh" \
        ] \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "nonroot" \
      } \
    } \
  ] \
}' > /.reproenv.json
su - nonroot
# End saving to specification to JSON.

%runscript
/condastartup.sh
